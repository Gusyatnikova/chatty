// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	entity "chatty/chatty/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ChatUseCase is an autogenerated mock type for the ChatUseCase type
type ChatUseCase struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *ChatUseCase) GetUserByID(_a0 context.Context, _a1 entity.UserID) (entity.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserID) entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: _a0, _a1
func (_m *ChatUseCase) GetUserByLogin(_a0 context.Context, _a1 entity.UserLogin) (entity.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserLogin) entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.UserLogin) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *ChatUseCase) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *ChatUseCase) Login(_a0 context.Context, _a1 entity.UserCreds) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCreds) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *ChatUseCase) Register(_a0 context.Context, _a1 entity.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChatUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatUseCase creates a new instance of ChatUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatUseCase(t mockConstructorTestingTNewChatUseCase) *ChatUseCase {
	mock := &ChatUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
