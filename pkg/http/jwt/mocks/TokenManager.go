// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	config "chatty/chatty/app/config"
	entity "chatty/chatty/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenManager is an autogenerated mock type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

// ExtractSub provides a mock function with given fields: token
func (_m *TokenManager) ExtractSub(token string) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateAccessToken provides a mock function with given fields: user
func (_m *TokenManager) GenerateAccessToken(user entity.User) (string, time.Time, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(entity.User) time.Time); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(entity.User) error); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetConfig provides a mock function with given fields:
func (_m *TokenManager) GetConfig() config.JWT {
	ret := _m.Called()

	var r0 config.JWT
	if rf, ok := ret.Get(0).(func() config.JWT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.JWT)
	}

	return r0
}

type mockConstructorTestingTNewTokenManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenManager(t mockConstructorTestingTNewTokenManager) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
